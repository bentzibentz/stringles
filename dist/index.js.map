{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;;AAAA;;AAAA;AAMA;AACA;;AAPA;AAaA;AACA;;AAdA;AAoBA;AACA;AAAA;AAAA;AAAA;;AAKA;AACA;;AA3BA;AAiCA;AACA;;AACA;AACA;;AApCA;AA0CA;AACA;;AA3CA;AAiDA;AACA;;AAlDA;AAwDA;AACA;AACA;AACA;;AA3DA;AAmEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AACA;;AA9EA;AAoFA;AACA;AACA;;AAtFA;AA4FA;AACA;;AA7FA;AAoGA;AACA;AACA;;AAtGA;AA4GA;AACA;;AA7GA;AAmHA;AAEA;AAAA;AAAA;AAIA;;AAzHA;AA+HA;AACA;;AAhIA;AAsIA;AACA;;AAvIA;AA6IA;AACA;AACA;;AA/IA;AAqJA;AAOA;AACA;;AA7JA;AAmKA;AAMA;AACA;;AA1KA;AAgLA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;;AAzLA;AA+LA;AACA;;AAhMA;AAsMA;AACA;AACA;AACA;;AAzMA;AA+MA;;AAEA;AACA;AACA;;AAEA;AACA;;AAtNA;AA4NA;AACA;AACA;;AA9NA;AAoOA;AAEA;AACA;;AAvOA;AA6OA;AACA;AAEA;;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;;AAxPA;AA+PA;AACA;AAhQA;AAEA;AACA;AACA;;;AA+PA;;;;;;;;;;;;;;;;;;;;;;ACtQA;AACA;AACA;AACA;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;;AAEA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;AACA;AACA;AACA;;;;;;AA/JA;;AAkKA;;;;;;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://stringles/./src/lib/index.ts","webpack://stringles/./src/lib/utils/utiles.ts","webpack://stringles/webpack/bootstrap","webpack://stringles/webpack/runtime/define property getters","webpack://stringles/webpack/runtime/hasOwnProperty shorthand","webpack://stringles/webpack/runtime/make namespace object","webpack://stringles/./src/demo/index.ts"],"sourcesContent":["import Utilities from \"./utils/utiles\";\n\nclass Stringles {\n  constructor() {}\n\n  /**\n   * \"Safer\" String.toLowerCase()\n   */\n   lowerCase = (str: string): string => {\n    return str.toLowerCase();\n  }\n\n  /**\n   * \"Safer\" String.toUpperCase()\n   */\n  upperCase = (str: string): string => {\n    return str.toUpperCase();\n  }\n\n  /**\n   * Convert string to camelCase text.\n   */\n  camelCase = (str: string): string => {\n    str = Utilities.replaceAccents(str);\n    str = Utilities.removeNonWord(str)\n        .replace(/-/g, \" \") //convert all hyphens to spaces\n        .replace(/\\s[a-z]/g, this.upperCase) //convert first char of each word to UPPERCASE\n        .replace(/\\s+/g, \"\") //remove spaces\n        .replace(/^[A-Z]/g, this.lowerCase); //convert first char to lowercase\n    return str;\n  }\n\n  /**\n   * Add space between camelCase text.\n   */\n  unCamelCase = (str: string): string => {\n    str = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\");\n    str = str.toLowerCase(); //add space between camelCase text\n    return str;\n  }\n\n  /**\n   * UPPERCASE first char of each word.\n   */\n  properCase = (str: string): string => {\n    return this.lowerCase(str).replace(/^\\w|\\s\\w/g, this.upperCase);\n  }\n\n  /**\n   * camelCase + UPPERCASE first char\n   */\n  pascalCase = (str: string): string => {\n    return this.camelCase(str).replace(/^[a-z]/, this.upperCase);\n  }\n\n  /**\n   * UPPERCASE first char of each sentence and lowercase other chars.\n   */\n  sentenceCase = (str: string): string =>  {\n    // Replace first char of each sentence (new line or after '.\\s+') to\n    // UPPERCASE\n    return this.lowerCase(str).replace(/(^\\w)|\\.\\s+(\\w)/gm, this.upperCase);\n  }\n\n  /**\n   * Convert to lower case, remove accents, remove non-word chars and\n   * replace spaces with the specified delimeter.\n   * Does not split camelCase text.\n   */\n  slugify = (str: string, delimeter: string): string => {\n    if (delimeter == null) {\n      delimeter = \"-\";\n    }\n\n    str = Utilities.replaceAccents(str);\n    str = Utilities.removeNonWord(str);\n    str = Utilities.trim(str) //should come after removeNonWord\n        .replace(/ +/g, delimeter) //replace spaces with delimeter\n        .toLowerCase();\n\n    return str;\n  }\n\n  /**\n   * Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.\n   */\n  hyphenate = (str: string): string => {\n    str = this.unCamelCase(str);\n    return this.slugify(str, \"-\");\n  }\n\n  /**\n   * Replaces hyphens with spaces. (only hyphens between word chars)\n   */\n  unhyphenate = (str: string): string => {\n    return str.replace(/(\\w)(-)(\\w)/g, \"$1 $3\");\n  }\n\n  /**\n   * Replaces spaces with underscores, split camelCase text, remove\n   * non-word chars, remove accents and convert to lower case.\n   */\n  underscore = (str: string): string => {\n    str = this.unCamelCase(str);\n    return this.slugify(str, \"_\");\n  }\n\n  /**\n   * Remove non-word chars.\n   */\n  removeNonWord = (str: string): string =>  {\n    return str.replace(/[^0-9a-zA-Z\\xC0-\\xFF -]/g, \"\");\n  }\n\n  /**\n   * Convert line-breaks from DOS/MAC to a single standard (UNIX by default)\n   */\n  normalizeLineBreaks = (str: string, lineEnd: string): string => {\n    lineEnd = lineEnd || \"\\n\";\n\n    return str\n        .replace(/\\r\\n/g, lineEnd) // DOS\n        .replace(/\\r/g, lineEnd) // Mac\n        .replace(/\\n/g, lineEnd); // Unix\n  }\n\n  /**\n   * Searches for a given substring\n   */\n  contains = (str: string, substring: string, fromIndex: number): boolean => {\n    return str.indexOf(substring, fromIndex) !== -1;\n  }\n\n  /**\n   * Truncate string at full words.\n   */\n  crop = (str: string, maxChars: number, append: string): string => {\n    return Utilities.truncate(str, maxChars, append, true);\n  }\n\n  /**\n   * Escape RegExp string chars.\n   */\n  escapeRegExp = (str: string): string => {\n    const ESCAPE_CHARS = /[\\\\.+*?^$[\\](){}/'#]/g;\n    return str.replace(ESCAPE_CHARS, \"\\\\$&\");\n  }\n\n  /**\n   * Escapes a string for insertion into HTML.\n   */\n  escapeHtml = (str: string): string => {\n    str = str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/'/g, \"&#39;\")\n        .replace(/\"/g, \"&quot;\");\n\n    return str;\n  }\n\n  /**\n   * Unescapes HTML special chars\n   */\n  unescapeHtml = (str: string): string => {\n    str = str\n        .replace(/&amp;/g, \"&\")\n        .replace(/&lt;/g, \"<\")\n        .replace(/&gt;/g, \">\")\n        .replace(/&#39;/g, \"'\")\n        .replace(/&quot;/g, '\"');\n    return str;\n  }\n\n  /**\n   * Escape string into unicode sequences\n   */\n  escapeUnicode = (str: string, shouldEscapePrintable: boolean): string => {\n    return str.replace(/[\\s\\S]/g, (ch: string) => {\n      // skip printable ASCII chars if we should not escape them\n      if (!shouldEscapePrintable && /[\\x20-\\x7E]/.test(ch)) {\n        return ch;\n      }\n      // we use \"000\" and slice(-4) for brevity, need to pad zeros,\n      // unicode escape always have 4 chars after \"\\u\"\n      return \"\\\\u\" + (\"000\" + ch.charCodeAt(0).toString(16)).slice(-4);\n    });\n  }\n\n  /**\n   * Remove HTML tags from string.\n   */\n  stripHtmlTags = (str: string): string => {\n    return str.replace(/<[^>]*>/g, \"\");\n  }\n\n  /**\n   * Remove non-printable ASCII chars\n   */\n  removeNonASCII = (str: string): string => {\n    // Matches non-printable ASCII chars -\n    // http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\n    return str.replace(/[^\\x20-\\x7E]/g, \"\");\n  }\n\n  /**\n   * String interpolation\n   */\n  interpolate = (template: string, replacements: Array<string>, syntax: string): string => {\n    const stache = /\\{\\{(\\w+)\\}\\}/g; //mustache-like\n\n    const replaceFn = (match: string, prop: string) => {\n      return prop in replacements ? replacements[prop] : \"\";\n    };\n\n    return template.replace(syntax || stache, replaceFn);\n  }\n\n  /**\n   * Pad string with `char` if its' length is smaller than `minLen`\n   */\n  rpad = (str: string, minLen: number, ch: string) => {\n    ch = ch || \" \";\n    return str.length < minLen ? str + Utilities.repeat(ch, minLen - str.length) : str;\n  }\n\n  /**\n   * Pad string with `char` if its' length is smaller than `minLen`\n   */\n  lpad = (str: string, minLen: number, ch: string): string => {\n    ch = ch || \" \";\n\n    return str.length < minLen ? Utilities.repeat(ch, minLen - str.length) + str : str;\n  }\n\n  /**\n   * Limit number of chars.\n   */\n  truncate = (str: string, maxChars: number, append: string, onlyFullWords: boolean): string => {\n    append = append || \"...\";\n    maxChars = onlyFullWords ? maxChars + 1 : maxChars;\n\n    str = Utilities.trim(str);\n    if (str.length <= maxChars) {\n      return str;\n    }\n    str = str.substr(0, maxChars - append.length);\n    //crop at last space or remove trailing whitespace\n    str = onlyFullWords ? str.substr(0, str.lastIndexOf(\" \")) : Utilities.trim(str);\n    return str + append;\n  }\n\n  /**\n   * Capture all capital letters following a word boundary (in case the\n   * input is in all caps)\n   */\n  abbreviate = (str: string): string => {\n    return str.match(/\\b([A-Z])/g).join(\"\");\n  }\n}\n\nexport default Stringles;\n","/**\n * Utility Service\n */\nclass Utilities {\n\n    static WHITE_SPACES = [\n        \" \",\n        \"\\n\",\n        \"\\r\",\n        \"\\t\",\n        \"\\f\",\n        \"\\v\",\n        \"\\u00A0\",\n        \"\\u1680\",\n        \"\\u180E\",\n        \"\\u2000\",\n        \"\\u2001\",\n        \"\\u2002\",\n        \"\\u2003\",\n        \"\\u2004\",\n        \"\\u2005\",\n        \"\\u2006\",\n        \"\\u2007\",\n        \"\\u2008\",\n        \"\\u2009\",\n        \"\\u200A\",\n        \"\\u2028\",\n        \"\\u2029\",\n        \"\\u202F\",\n        \"\\u205F\",\n        \"\\u3000\"\n    ];\n\n    /**\n     * Replaces all accented chars with regular ones\n     */\n    static replaceAccents(str: string): string {\n        // verifies if the String has accents and replace them\n        if (str.search(/[\\xC0-\\xFF]/g) > -1) {\n            str = str\n                .replace(/[\\xC0-\\xC5]/g, \"A\")\n                .replace(/\\xC6/g, \"AE\")\n                .replace(/\\xC7/g, \"C\")\n                .replace(/[\\xC8-\\xCB]/g, \"E\")\n                .replace(/[\\xCC-\\xCF]/g, \"I\")\n                .replace(/\\xD0/g, \"D\")\n                .replace(/\\xD1/g, \"N\")\n                .replace(/[\\xD2-\\xD6\\xD8]/g, \"O\")\n                .replace(/[\\xD9-\\xDC]/g, \"U\")\n                .replace(/\\xDD/g, \"Y\")\n                .replace(/\\xDE/g, \"P\")\n                .replace(/[\\xE0-\\xE5]/g, \"a\")\n                .replace(/\\xE6/g, \"ae\")\n                .replace(/\\xE7/g, \"c\")\n                .replace(/[\\xE8-\\xEB]/g, \"e\")\n                .replace(/[\\xEC-\\xEF]/g, \"i\")\n                .replace(/\\xF1/g, \"n\")\n                .replace(/[\\xF2-\\xF6\\xF8]/g, \"o\")\n                .replace(/[\\xF9-\\xFC]/g, \"u\")\n                .replace(/\\xFE/g, \"p\")\n                .replace(/[\\xFD\\xFF]/g, \"y\");\n        }\n\n        return str;\n    }\n\n    /**\n     * Remove non-word chars.\n     */\n    static removeNonWord(str: string): string {\n        return str.replace(/[^0-9a-zA-Z\\xC0-\\xFF -]/g, \"\");\n    }\n\n    /**\n     * Remove chars from beginning of string.\n     */\n    static ltrim(str: string, chars: Array<string>): string {\n        chars = chars || this.WHITE_SPACES;\n\n        let start = 0;\n        const len = str.length;\n        const charLen = chars.length;\n        let found = true;\n        let i;\n        let c;\n\n        while (found && start < len) {\n            found = false;\n            i = -1;\n            c = str.charAt(start);\n\n            while (++i < charLen) {\n                if (c === chars[i]) {\n                    found = true;\n                    start++;\n                    break;\n                }\n            }\n        }\n\n        return start >= len ? \"\" : str.substr(start, len);\n    }\n\n    /**\n     * Remove chars from end of string.\n     */\n    static rtrim(str: string, chars: Array<string>): string {\n        chars = chars || this.WHITE_SPACES;\n\n        let end = str.length - 1;\n        const charLen = chars.length;\n        let found = true;\n        let i;\n        let c;\n\n        while (found && end >= 0) {\n            found = false;\n            i = -1;\n            c = str.charAt(end);\n\n            while (++i < charLen) {\n                if (c === chars[i]) {\n                    found = true;\n                    end--;\n                    break;\n                }\n            }\n        }\n\n        return end >= 0 ? str.substring(0, end + 1) : \"\";\n    }\n\n    /**\n     * Remove white-spaces from beginning and end of string.\n     */\n    static trim(str: string, chars?: Array<string>): string {\n        chars = chars || this.WHITE_SPACES;\n        return this.ltrim(this.rtrim(str, chars), chars);\n    }\n\n    /**\n     * Limit number of chars.\n     */\n    static truncate(str: string, maxChars: number, append: string, onlyFullWords: boolean): string {\n        append = append || \"...\";\n        maxChars = onlyFullWords ? maxChars + 1 : maxChars;\n\n        str = this.trim(str);\n        if (str.length <= maxChars) {\n            return str;\n        }\n        str = str.substr(0, maxChars - append.length);\n        //crop at last space or remove trailing whitespace\n        str = onlyFullWords ? str.substr(0, str.lastIndexOf(\" \")) : this.trim(str);\n        return str + append;\n    }\n\n    /**\n     * Repeat string n times\n     */\n    static repeat(str: string, n: number): string {\n        return new Array(n + 1).join(str);\n    }\n}\n\nexport default Utilities;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Stringles from \"../lib\";\nconst stringles = new Stringles();\n\nconst demo1 = stringles.upperCase(\"Hello World\");\nconst demo2 = stringles.lowerCase(\"Hello World\");\nconst demo3 = stringles.camelCase(\"hello world\");\nconst demo4 = stringles.unCamelCase(\"helloWorld\");\nconst demo5 = stringles.properCase(\"hello world\");\nconst demo6 = stringles.pascalCase(\"hello world see you later\");\nconst demo7 = stringles.sentenceCase(\"hello world see you later. maybe tomorrow\");\n\nconsole.log(demo1);\nconsole.log(demo2);\nconsole.log(demo3);\nconsole.log(demo4);\nconsole.log(demo5);\nconsole.log(demo6);\nconsole.log(demo7);\n"],"names":[],"sourceRoot":""}